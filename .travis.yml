# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

env:
  global:
    - CRATE_NAME=leanpub-cli

matrix:
  include:
    # Linux
    - env: TARGET=aarch64-unknown-linux-gnu
    - env: TARGET=arm-unknown-linux-gnueabi
    - env: TARGET=armv7-unknown-linux-gnueabihf
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    - env: TARGET=i686-apple-darwin
      os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # *BSD
    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu

    # Bare metal
    # These targets don't support std and as such are likely not suitable for
    # most crates.
    # - env: TARGET=thumbv6m-none-eabi
    # - env: TARGET=thumbv7em-none-eabi
    # - env: TARGET=thumbv7em-none-eabihf
    # - env: TARGET=thumbv7m-none-eabi

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly

before_install:
  - set -e
  - rustup self update

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  api_key:
    secure: NWPH6Cse5tmW9QszfuxvTZt63FrLNLZeaUgcUjfHpaDuzwML4gOE8f9Wb5XeZ4NFNOzCdHYMUm1n0Y/B4PU0IQiXCdjT/0Jmat29qSJ13QNprVAy98yGig1hdj26fTxlX54Lx9UOTFEkGjcQka1LgovD43jIRkUkGgc+AMf/xgruefyBslGATJ0KzfzSyEb3+QvVtotmGmkmKwPkXeyEml/qYNi3Kzcy9mAwxDq9umn5qdlLEgQ12IJAt7NB7IjhSUujWhIuAUut/iUudMlIeShOVavdr1SwgeLnJcmCBCte77PstLZD496ydE+FG6aSoaGUFyNdKMQkBH+QHgmsmY8WbL2NuSCXrpRR0pU8nfRXAZ3JmgwtFP7yWVC0h32dpryWLOnfZ8ncKp12j8rLYuYeB0zF5HomEVT3jYzXYIxsaJiHJ2nBLMgm2+hrc6NXhchA8TENMvG2taNhIEmGyud32bO2iJm0TbHfDEUIL+SjHiWvsDbwn9eTs0p6av0Gg9xZNbRAb3Dil0/D8UUN59TE8NGJqUd1nyj1f5kGP7B4XhnN1VYMSUiRCa5Vb/VFFq+dg2CPOaMFy5P2PmgCyTdNBVPU3c0gN5K+et3COaCNWSnzUqxt4yl6HN50nf1Rc4UkfoSku9rBQjB6CgdJDpQIDoh9E7PHyy/cDfZhV0M=
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
